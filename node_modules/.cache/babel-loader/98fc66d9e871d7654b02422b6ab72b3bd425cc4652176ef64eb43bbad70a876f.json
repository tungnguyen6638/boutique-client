{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";// Khởi tạo state cho cart slice\nconst cartInitialState={listCart:JSON.parse(localStorage.getItem(\"cartArr\"))?JSON.parse(localStorage.getItem(\"cartArr\")):[]};const cartSlice=createSlice({name:\"cart\",initialState:cartInitialState,reducers:{// addCart\naddCart(state,payload){// Kiểm tra nếu listCart ko có thì sẽ push payload vào\nif(state.listCart.length===0){state.listCart.push(payload.payload);}else{// Tạo 1 biến itemExist để kiểm tra lúc add vào item có tồn tại hay chưa\nlet itemExist=false;// Lặp qua listCart\nstate.listCart.forEach((cart,index)=>{// Nếu item trong list cart có id bằng với id của payload (tức là item đã tồn tại rồi) thì sẽ gán biến itemExist là có item\n// đồng thời sửa lại item trong listCart có index bằng index đang lặp các thông tin của payload mới add vào\nif(cart.product[\"_id\"][\"$oid\"]===payload.payload.product[\"_id\"][\"$oid\"]){itemExist=true;state.listCart[index]={product:cart.product,quantity:Number(cart.quantity)+Number(payload.payload.quantity),total:Number(cart.total)+Number(payload.payload.total)};}});// Nếu như chưa có item thì sẽ push item của payload vào listCart\nif(!itemExist){state.listCart.push(payload.payload);}}// Gắn listCart vào localStorage\nlocalStorage.setItem(\"cartArr\",JSON.stringify(state.listCart));},updateCart(state,payload){state.listCart.forEach((cart,index)=>{if(cart.product[\"_id\"][\"$oid\"]===payload.payload.product[\"_id\"][\"$oid\"]){state.listCart[index]={product:cart.product,quantity:payload.payload.quantity,total:payload.payload.total};}});localStorage.setItem(\"cartArr\",JSON.stringify(state.listCart));},deleteCart(state,payload){state.listCart.forEach((cart,index)=>{if(cart.product[\"_id\"][\"$oid\"]===payload.payload.product[\"_id\"][\"$oid\"]){state.listCart.splice(index,1);}});localStorage.setItem(\"cartArr\",JSON.stringify(state.listCart));},deleteAllCart(state){state.listCart.splice(0,state.listCart.length);localStorage.removeItem(\"cartArr\");}}});export default cartSlice.reducer;export const cartActions=cartSlice.actions;","map":{"version":3,"names":["createSlice","cartInitialState","listCart","JSON","parse","localStorage","getItem","cartSlice","name","initialState","reducers","addCart","state","payload","length","push","itemExist","forEach","cart","index","product","quantity","Number","total","setItem","stringify","updateCart","deleteCart","splice","deleteAllCart","removeItem","reducer","cartActions","actions"],"sources":["D:/ReactJS/Assignment 03/rjs-asm03/src/store/cartSlice.jsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// Khởi tạo state cho cart slice\r\nconst cartInitialState = {\r\n  listCart: JSON.parse(localStorage.getItem(\"cartArr\"))\r\n    ? JSON.parse(localStorage.getItem(\"cartArr\"))\r\n    : [],\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: cartInitialState,\r\n  reducers: {\r\n    // addCart\r\n    addCart(state, payload) {\r\n      // Kiểm tra nếu listCart ko có thì sẽ push payload vào\r\n      if (state.listCart.length === 0) {\r\n        state.listCart.push(payload.payload);\r\n      } else {\r\n        // Tạo 1 biến itemExist để kiểm tra lúc add vào item có tồn tại hay chưa\r\n        let itemExist = false;\r\n        // Lặp qua listCart\r\n        state.listCart.forEach((cart, index) => {\r\n          // Nếu item trong list cart có id bằng với id của payload (tức là item đã tồn tại rồi) thì sẽ gán biến itemExist là có item\r\n          // đồng thời sửa lại item trong listCart có index bằng index đang lặp các thông tin của payload mới add vào\r\n          if (\r\n            cart.product[\"_id\"][\"$oid\"] ===\r\n            payload.payload.product[\"_id\"][\"$oid\"]\r\n          ) {\r\n            itemExist = true;\r\n            state.listCart[index] = {\r\n              product: cart.product,\r\n              quantity:\r\n                Number(cart.quantity) + Number(payload.payload.quantity),\r\n              total: Number(cart.total) + Number(payload.payload.total),\r\n            };\r\n          }\r\n        });\r\n        // Nếu như chưa có item thì sẽ push item của payload vào listCart\r\n        if (!itemExist) {\r\n          state.listCart.push(payload.payload);\r\n        }\r\n      }\r\n      // Gắn listCart vào localStorage\r\n      localStorage.setItem(\"cartArr\", JSON.stringify(state.listCart));\r\n    },\r\n    updateCart(state, payload) {\r\n      state.listCart.forEach((cart, index) => {\r\n        if (\r\n          cart.product[\"_id\"][\"$oid\"] === payload.payload.product[\"_id\"][\"$oid\"]\r\n        ) {\r\n          state.listCart[index] = {\r\n            product: cart.product,\r\n            quantity: payload.payload.quantity,\r\n            total: payload.payload.total,\r\n          };\r\n        }\r\n      });\r\n      localStorage.setItem(\"cartArr\", JSON.stringify(state.listCart));\r\n    },\r\n    deleteCart(state, payload) {\r\n      state.listCart.forEach((cart, index) => {\r\n        if (\r\n          cart.product[\"_id\"][\"$oid\"] === payload.payload.product[\"_id\"][\"$oid\"]\r\n        ) {\r\n          state.listCart.splice(index, 1);\r\n        }\r\n      });\r\n      localStorage.setItem(\"cartArr\", JSON.stringify(state.listCart));\r\n    },\r\n    deleteAllCart(state) {\r\n      state.listCart.splice(0, state.listCart.length);\r\n      localStorage.removeItem(\"cartArr\");\r\n    },\r\n  },\r\n});\r\n\r\nexport default cartSlice.reducer;\r\n\r\nexport const cartActions = cartSlice.actions;\r\n"],"mappings":"AAAA,OAASA,WAAW,KAAQ,kBAAkB,CAE9C;AACA,KAAM,CAAAC,gBAAgB,CAAG,CACvBC,QAAQ,CAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,CACjDH,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,CAC3C,EACN,CAAC,CAED,KAAM,CAAAC,SAAS,CAAGP,WAAW,CAAC,CAC5BQ,IAAI,CAAE,MAAM,CACZC,YAAY,CAAER,gBAAgB,CAC9BS,QAAQ,CAAE,CACR;AACAC,OAAOA,CAACC,KAAK,CAAEC,OAAO,CAAE,CACtB;AACA,GAAID,KAAK,CAACV,QAAQ,CAACY,MAAM,GAAK,CAAC,CAAE,CAC/BF,KAAK,CAACV,QAAQ,CAACa,IAAI,CAACF,OAAO,CAACA,OAAO,CAAC,CACtC,CAAC,IAAM,CACL;AACA,GAAI,CAAAG,SAAS,CAAG,KAAK,CACrB;AACAJ,KAAK,CAACV,QAAQ,CAACe,OAAO,CAAC,CAACC,IAAI,CAAEC,KAAK,GAAK,CACtC;AACA;AACA,GACED,IAAI,CAACE,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,GAC3BP,OAAO,CAACA,OAAO,CAACO,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CACtC,CACAJ,SAAS,CAAG,IAAI,CAChBJ,KAAK,CAACV,QAAQ,CAACiB,KAAK,CAAC,CAAG,CACtBC,OAAO,CAAEF,IAAI,CAACE,OAAO,CACrBC,QAAQ,CACNC,MAAM,CAACJ,IAAI,CAACG,QAAQ,CAAC,CAAGC,MAAM,CAACT,OAAO,CAACA,OAAO,CAACQ,QAAQ,CAAC,CAC1DE,KAAK,CAAED,MAAM,CAACJ,IAAI,CAACK,KAAK,CAAC,CAAGD,MAAM,CAACT,OAAO,CAACA,OAAO,CAACU,KAAK,CAC1D,CAAC,CACH,CACF,CAAC,CAAC,CACF;AACA,GAAI,CAACP,SAAS,CAAE,CACdJ,KAAK,CAACV,QAAQ,CAACa,IAAI,CAACF,OAAO,CAACA,OAAO,CAAC,CACtC,CACF,CACA;AACAR,YAAY,CAACmB,OAAO,CAAC,SAAS,CAAErB,IAAI,CAACsB,SAAS,CAACb,KAAK,CAACV,QAAQ,CAAC,CAAC,CACjE,CAAC,CACDwB,UAAUA,CAACd,KAAK,CAAEC,OAAO,CAAE,CACzBD,KAAK,CAACV,QAAQ,CAACe,OAAO,CAAC,CAACC,IAAI,CAAEC,KAAK,GAAK,CACtC,GACED,IAAI,CAACE,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,GAAKP,OAAO,CAACA,OAAO,CAACO,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CACtE,CACAR,KAAK,CAACV,QAAQ,CAACiB,KAAK,CAAC,CAAG,CACtBC,OAAO,CAAEF,IAAI,CAACE,OAAO,CACrBC,QAAQ,CAAER,OAAO,CAACA,OAAO,CAACQ,QAAQ,CAClCE,KAAK,CAAEV,OAAO,CAACA,OAAO,CAACU,KACzB,CAAC,CACH,CACF,CAAC,CAAC,CACFlB,YAAY,CAACmB,OAAO,CAAC,SAAS,CAAErB,IAAI,CAACsB,SAAS,CAACb,KAAK,CAACV,QAAQ,CAAC,CAAC,CACjE,CAAC,CACDyB,UAAUA,CAACf,KAAK,CAAEC,OAAO,CAAE,CACzBD,KAAK,CAACV,QAAQ,CAACe,OAAO,CAAC,CAACC,IAAI,CAAEC,KAAK,GAAK,CACtC,GACED,IAAI,CAACE,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,GAAKP,OAAO,CAACA,OAAO,CAACO,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CACtE,CACAR,KAAK,CAACV,QAAQ,CAAC0B,MAAM,CAACT,KAAK,CAAE,CAAC,CAAC,CACjC,CACF,CAAC,CAAC,CACFd,YAAY,CAACmB,OAAO,CAAC,SAAS,CAAErB,IAAI,CAACsB,SAAS,CAACb,KAAK,CAACV,QAAQ,CAAC,CAAC,CACjE,CAAC,CACD2B,aAAaA,CAACjB,KAAK,CAAE,CACnBA,KAAK,CAACV,QAAQ,CAAC0B,MAAM,CAAC,CAAC,CAAEhB,KAAK,CAACV,QAAQ,CAACY,MAAM,CAAC,CAC/CT,YAAY,CAACyB,UAAU,CAAC,SAAS,CAAC,CACpC,CACF,CACF,CAAC,CAAC,CAEF,cAAe,CAAAvB,SAAS,CAACwB,OAAO,CAEhC,MAAO,MAAM,CAAAC,WAAW,CAAGzB,SAAS,CAAC0B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}