{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartInitialState = {\n  listCart: []\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: cartInitialState,\n  reducers: {\n    addCart(state, payload) {\n      if (state.listCart.length === 0) {\n        state.listCart = [...state.listCart, state.listCart.push(payload.payload)];\n      } else {\n        console.log(state.listCart);\n        // let itemExist = false;\n        // state.listCart = state.listCart.map((cart) => {\n        //   if (\n        //     cart.product[\"_id\"][\"$oid\"] ===\n        //     payload.payload.product[\"_id\"][\"$oid\"]\n        //   ) {\n        //     return {\n        //       product: cart.product,\n        //       quantity: cart.quantity + payload.payload.quantity,\n        //       total: cart.total + payload.payload.total,\n        //     };\n        //   } else {\n        //     itemExist = true;\n        //   }\n        // });\n        // if (itemExist) {\n        //   state.listCart = state.listCart.push(payload.payload);\n        // }\n      }\n\n      // else {\n      //   state.listCart.map((cart) => {\n      //     if (\n      //       cart.product[\"_id\"][\"$oid\"] ===\n      //       payload.payload.product[\"_id\"][\"$oid\"]\n      //     ) {\n      //       return {\n      //         product: cart.product,\n      //         quantity: cart.quantity + payload.payload.quantity,\n      //         total: cart.total + payload.payload.total,\n      //       };\n      //     }else {\n\n      //     }\n      //   });\n      // }\n    },\n    updateCart(state, payload) {\n      state.listCart = state.listCart.map(cart => {\n        if (state.listCart.name === payload.payload.name) {\n          return payload.payload;\n        } else {\n          return cart;\n        }\n      });\n    },\n    deleteCart(state, payload) {\n      state.listCart = state.listCart.pop(payload.payload);\n    }\n  }\n});\nexport default cartSlice.reducer;\nexport const cartActions = cartSlice.actions;","map":{"version":3,"names":["createSlice","cartInitialState","listCart","cartSlice","name","initialState","reducers","addCart","state","payload","length","push","console","log","updateCart","map","cart","deleteCart","pop","reducer","cartActions","actions"],"sources":["D:/ReactJS/Assignment 03/rjs-asm03/src/store/cartSlice.jsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst cartInitialState = {\r\n  listCart: [],\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: cartInitialState,\r\n  reducers: {\r\n    addCart(state, payload) {\r\n      if (state.listCart.length === 0) {\r\n        state.listCart = [\r\n          ...state.listCart,\r\n          state.listCart.push(payload.payload),\r\n        ];\r\n      } else {\r\n        console.log(state.listCart);\r\n        // let itemExist = false;\r\n        // state.listCart = state.listCart.map((cart) => {\r\n        //   if (\r\n        //     cart.product[\"_id\"][\"$oid\"] ===\r\n        //     payload.payload.product[\"_id\"][\"$oid\"]\r\n        //   ) {\r\n        //     return {\r\n        //       product: cart.product,\r\n        //       quantity: cart.quantity + payload.payload.quantity,\r\n        //       total: cart.total + payload.payload.total,\r\n        //     };\r\n        //   } else {\r\n        //     itemExist = true;\r\n        //   }\r\n        // });\r\n        // if (itemExist) {\r\n        //   state.listCart = state.listCart.push(payload.payload);\r\n        // }\r\n      }\r\n\r\n      // else {\r\n      //   state.listCart.map((cart) => {\r\n      //     if (\r\n      //       cart.product[\"_id\"][\"$oid\"] ===\r\n      //       payload.payload.product[\"_id\"][\"$oid\"]\r\n      //     ) {\r\n      //       return {\r\n      //         product: cart.product,\r\n      //         quantity: cart.quantity + payload.payload.quantity,\r\n      //         total: cart.total + payload.payload.total,\r\n      //       };\r\n      //     }else {\r\n\r\n      //     }\r\n      //   });\r\n      // }\r\n    },\r\n    updateCart(state, payload) {\r\n      state.listCart = state.listCart.map((cart) => {\r\n        if (state.listCart.name === payload.payload.name) {\r\n          return payload.payload;\r\n        } else {\r\n          return cart;\r\n        }\r\n      });\r\n    },\r\n    deleteCart(state, payload) {\r\n      state.listCart = state.listCart.pop(payload.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport default cartSlice.reducer;\r\n\r\nexport const cartActions = cartSlice.actions;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,gBAAgB,GAAG;EACvBC,QAAQ,EAAE;AACZ,CAAC;AAED,MAAMC,SAAS,GAAGH,WAAW,CAAC;EAC5BI,IAAI,EAAE,MAAM;EACZC,YAAY,EAAEJ,gBAAgB;EAC9BK,QAAQ,EAAE;IACRC,OAAOA,CAACC,KAAK,EAAEC,OAAO,EAAE;MACtB,IAAID,KAAK,CAACN,QAAQ,CAACQ,MAAM,KAAK,CAAC,EAAE;QAC/BF,KAAK,CAACN,QAAQ,GAAG,CACf,GAAGM,KAAK,CAACN,QAAQ,EACjBM,KAAK,CAACN,QAAQ,CAACS,IAAI,CAACF,OAAO,CAACA,OAAO,CAAC,CACrC;MACH,CAAC,MAAM;QACLG,OAAO,CAACC,GAAG,CAACL,KAAK,CAACN,QAAQ,CAAC;QAC3B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACF;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;IACF,CAAC;IACDY,UAAUA,CAACN,KAAK,EAAEC,OAAO,EAAE;MACzBD,KAAK,CAACN,QAAQ,GAAGM,KAAK,CAACN,QAAQ,CAACa,GAAG,CAAEC,IAAI,IAAK;QAC5C,IAAIR,KAAK,CAACN,QAAQ,CAACE,IAAI,KAAKK,OAAO,CAACA,OAAO,CAACL,IAAI,EAAE;UAChD,OAAOK,OAAO,CAACA,OAAO;QACxB,CAAC,MAAM;UACL,OAAOO,IAAI;QACb;MACF,CAAC,CAAC;IACJ,CAAC;IACDC,UAAUA,CAACT,KAAK,EAAEC,OAAO,EAAE;MACzBD,KAAK,CAACN,QAAQ,GAAGM,KAAK,CAACN,QAAQ,CAACgB,GAAG,CAACT,OAAO,CAACA,OAAO,CAAC;IACtD;EACF;AACF,CAAC,CAAC;AAEF,eAAeN,SAAS,CAACgB,OAAO;AAEhC,OAAO,MAAMC,WAAW,GAAGjB,SAAS,CAACkB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}