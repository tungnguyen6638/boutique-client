{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst authenticateInitialState = {\n  nameIsValid: false,\n  emailIsValid: false,\n  passwordIsValid: false,\n  phoneIsValid: false,\n  nameIsTouched: true,\n  emailIsTouched: true,\n  passwordIsTouched: true,\n  phoneIsTouched: true\n};\nconst authenticateSlice = createSlice({\n  name: \"authenticate\",\n  initialState: authenticateInitialState,\n  reducers: {\n    setNameIstouched(state) {\n      state.nameIsTouched = true;\n    },\n    setEmailIsTouched(state) {\n      state.emailIsTouched = true;\n    },\n    setPasswordIsTouched(state) {\n      state.passwordIsTouched = true;\n    },\n    setPhoneIsTouched(state) {\n      state.phoneIsTouched = true;\n    },\n    fullnameValidation(state, payload) {\n      if (payload.payload.trim() !== \"\") {\n        state.nameIsValid = true;\n        state.nameIsTouched = false;\n      } else {\n        state.nameIsValid = false;\n        state.nameIsTouched = false;\n      }\n    },\n    emailValidation(state, payload) {\n      if (payload.payload.includes(\"@\")) {\n        state.emailIsValid = true;\n        state.emailIsTouched = false;\n      } else {\n        state.emailIsValid = false;\n        state.emailIsTouched = false;\n      }\n    },\n    passwordValidation(state, payload) {\n      if (payload.payload.length > 8) {\n        state.passwordIsValid = true;\n        state.passwordIsTouched = false;\n      } else {\n        state.passwordIsValid = false;\n        state.passwordIsTouched = false;\n      }\n    },\n    phoneValidation(state, payload) {\n      payload.payload.length > 12 ? state.isValid = false : state.isValid = true;\n    }\n  }\n});\nexport default authenticateSlice.reducer;\nexport const authenticateActions = authenticateSlice.actions;","map":{"version":3,"names":["createSlice","authenticateInitialState","nameIsValid","emailIsValid","passwordIsValid","phoneIsValid","nameIsTouched","emailIsTouched","passwordIsTouched","phoneIsTouched","authenticateSlice","name","initialState","reducers","setNameIstouched","state","setEmailIsTouched","setPasswordIsTouched","setPhoneIsTouched","fullnameValidation","payload","trim","emailValidation","includes","passwordValidation","length","phoneValidation","isValid","reducer","authenticateActions","actions"],"sources":["D:/ReactJS/Assignment 03/rjs-asm03/src/store/authenticateSlice.jsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst authenticateInitialState = {\r\n  nameIsValid: false,\r\n  emailIsValid: false,\r\n  passwordIsValid: false,\r\n  phoneIsValid: false,\r\n  nameIsTouched: true,\r\n  emailIsTouched: true,\r\n  passwordIsTouched: true,\r\n  phoneIsTouched: true,\r\n};\r\n\r\nconst authenticateSlice = createSlice({\r\n  name: \"authenticate\",\r\n  initialState: authenticateInitialState,\r\n  reducers: {\r\n    setNameIstouched(state) {\r\n      state.nameIsTouched = true;\r\n    },\r\n    setEmailIsTouched(state) {\r\n      state.emailIsTouched = true;\r\n    },\r\n    setPasswordIsTouched(state) {\r\n      state.passwordIsTouched = true;\r\n    },\r\n    setPhoneIsTouched(state) {\r\n      state.phoneIsTouched = true;\r\n    },\r\n\r\n    fullnameValidation(state, payload) {\r\n      if (payload.payload.trim() !== \"\") {\r\n        state.nameIsValid = true;\r\n        state.nameIsTouched = false;\r\n      } else {\r\n        state.nameIsValid = false;\r\n        state.nameIsTouched = false;\r\n      }\r\n    },\r\n    emailValidation(state, payload) {\r\n      if (payload.payload.includes(\"@\")) {\r\n        state.emailIsValid = true;\r\n        state.emailIsTouched = false;\r\n      } else {\r\n        state.emailIsValid = false;\r\n        state.emailIsTouched = false;\r\n      }\r\n    },\r\n    passwordValidation(state, payload) {\r\n      if (payload.payload.length > 8) {\r\n        state.passwordIsValid = true;\r\n        state.passwordIsTouched = false;\r\n      } else {\r\n        state.passwordIsValid = false;\r\n        state.passwordIsTouched = false;\r\n      }\r\n    },\r\n    phoneValidation(state, payload) {\r\n      payload.payload.length > 12\r\n        ? (state.isValid = false)\r\n        : (state.isValid = true);\r\n    },\r\n  },\r\n});\r\n\r\nexport default authenticateSlice.reducer;\r\n\r\nexport const authenticateActions = authenticateSlice.actions;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,wBAAwB,GAAG;EAC/BC,WAAW,EAAE,KAAK;EAClBC,YAAY,EAAE,KAAK;EACnBC,eAAe,EAAE,KAAK;EACtBC,YAAY,EAAE,KAAK;EACnBC,aAAa,EAAE,IAAI;EACnBC,cAAc,EAAE,IAAI;EACpBC,iBAAiB,EAAE,IAAI;EACvBC,cAAc,EAAE;AAClB,CAAC;AAED,MAAMC,iBAAiB,GAAGV,WAAW,CAAC;EACpCW,IAAI,EAAE,cAAc;EACpBC,YAAY,EAAEX,wBAAwB;EACtCY,QAAQ,EAAE;IACRC,gBAAgBA,CAACC,KAAK,EAAE;MACtBA,KAAK,CAACT,aAAa,GAAG,IAAI;IAC5B,CAAC;IACDU,iBAAiBA,CAACD,KAAK,EAAE;MACvBA,KAAK,CAACR,cAAc,GAAG,IAAI;IAC7B,CAAC;IACDU,oBAAoBA,CAACF,KAAK,EAAE;MAC1BA,KAAK,CAACP,iBAAiB,GAAG,IAAI;IAChC,CAAC;IACDU,iBAAiBA,CAACH,KAAK,EAAE;MACvBA,KAAK,CAACN,cAAc,GAAG,IAAI;IAC7B,CAAC;IAEDU,kBAAkBA,CAACJ,KAAK,EAAEK,OAAO,EAAE;MACjC,IAAIA,OAAO,CAACA,OAAO,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACjCN,KAAK,CAACb,WAAW,GAAG,IAAI;QACxBa,KAAK,CAACT,aAAa,GAAG,KAAK;MAC7B,CAAC,MAAM;QACLS,KAAK,CAACb,WAAW,GAAG,KAAK;QACzBa,KAAK,CAACT,aAAa,GAAG,KAAK;MAC7B;IACF,CAAC;IACDgB,eAAeA,CAACP,KAAK,EAAEK,OAAO,EAAE;MAC9B,IAAIA,OAAO,CAACA,OAAO,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;QACjCR,KAAK,CAACZ,YAAY,GAAG,IAAI;QACzBY,KAAK,CAACR,cAAc,GAAG,KAAK;MAC9B,CAAC,MAAM;QACLQ,KAAK,CAACZ,YAAY,GAAG,KAAK;QAC1BY,KAAK,CAACR,cAAc,GAAG,KAAK;MAC9B;IACF,CAAC;IACDiB,kBAAkBA,CAACT,KAAK,EAAEK,OAAO,EAAE;MACjC,IAAIA,OAAO,CAACA,OAAO,CAACK,MAAM,GAAG,CAAC,EAAE;QAC9BV,KAAK,CAACX,eAAe,GAAG,IAAI;QAC5BW,KAAK,CAACP,iBAAiB,GAAG,KAAK;MACjC,CAAC,MAAM;QACLO,KAAK,CAACX,eAAe,GAAG,KAAK;QAC7BW,KAAK,CAACP,iBAAiB,GAAG,KAAK;MACjC;IACF,CAAC;IACDkB,eAAeA,CAACX,KAAK,EAAEK,OAAO,EAAE;MAC9BA,OAAO,CAACA,OAAO,CAACK,MAAM,GAAG,EAAE,GACtBV,KAAK,CAACY,OAAO,GAAG,KAAK,GACrBZ,KAAK,CAACY,OAAO,GAAG,IAAK;IAC5B;EACF;AACF,CAAC,CAAC;AAEF,eAAejB,iBAAiB,CAACkB,OAAO;AAExC,OAAO,MAAMC,mBAAmB,GAAGnB,iBAAiB,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}