{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// Khởi tạo state cho cart slice\nconst cartInitialState = {\n  listCart: JSON.parse(localStorage.getItem(\"cartArr\")) ? JSON.parse(localStorage.getItem(\"cartArr\")) : []\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: cartInitialState,\n  reducers: {\n    // addCart\n    addCart(state, payload) {\n      // Kiểm tra nếu listCart ko có thì sẽ push payload vào\n      if (state.listCart.length === 0) {\n        state.listCart.push(payload.payload);\n      } else {\n        // Tạo 1 biến itemExist để kiểm tra lúc add vào item có tồn tại hay chưa\n        let itemExist = false;\n        // Lặp qua listCart\n        state.listCart.forEach((cart, index) => {\n          // Nếu item trong list cart có id bằng với id của payload (tức là item đã tồn tại rồi) thì sẽ gán biến itemExist là có item\n          // đồng thời sửa lại item trong listCart có index bằng index đang lặp các thông tin của payload mới add vào\n          if (cart.product[\"_id\"][\"$oid\"] === payload.payload.product[\"_id\"][\"$oid\"]) {\n            itemExist = true;\n            state.listCart[index] = {\n              product: cart.product,\n              quantity: Number(cart.quantity) + Number(payload.payload.quantity),\n              total: Number(cart.total) + Number(payload.payload.total)\n            };\n          }\n        });\n        // Nếu như chưa có item thì sẽ push item của payload vào listCart\n        if (!itemExist) {\n          state.listCart.push(payload.payload);\n        }\n      }\n      // Gắn listCart vào localStorage\n      localStorage.setItem(\"cartArr\", JSON.stringify(state.listCart));\n    },\n    updateCart(state, payload) {\n      state.listCart.forEach((cart, index) => {\n        if (cart.product[\"_id\"][\"$oid\"] === payload.payload.product[\"_id\"][\"$oid\"]) {\n          if (cart.quantity === 0) {\n            state.listCart.splice(index, 1);\n          }\n          state.listCart[index] = {\n            product: cart.product,\n            quantity: payload.payload.quantity,\n            total: payload.payload.total\n          };\n        }\n      });\n    },\n    deleteCart(state, payload) {\n      state.listCart.forEach((cart, index) => {\n        if (cart.product[\"_id\"][\"$oid\"] === payload.payload.product[\"_id\"][\"$oid\"]) {\n          state.listCart.splice(index, 1);\n        }\n      });\n    }\n  }\n});\nexport default cartSlice.reducer;\nexport const cartActions = cartSlice.actions;","map":{"version":3,"names":["createSlice","cartInitialState","listCart","JSON","parse","localStorage","getItem","cartSlice","name","initialState","reducers","addCart","state","payload","length","push","itemExist","forEach","cart","index","product","quantity","Number","total","setItem","stringify","updateCart","splice","deleteCart","reducer","cartActions","actions"],"sources":["D:/ReactJS/Assignment 03/rjs-asm03/src/store/cartSlice.jsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// Khởi tạo state cho cart slice\r\nconst cartInitialState = {\r\n  listCart: JSON.parse(localStorage.getItem(\"cartArr\"))\r\n    ? JSON.parse(localStorage.getItem(\"cartArr\"))\r\n    : [],\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: cartInitialState,\r\n  reducers: {\r\n    // addCart\r\n    addCart(state, payload) {\r\n      // Kiểm tra nếu listCart ko có thì sẽ push payload vào\r\n      if (state.listCart.length === 0) {\r\n        state.listCart.push(payload.payload);\r\n      } else {\r\n        // Tạo 1 biến itemExist để kiểm tra lúc add vào item có tồn tại hay chưa\r\n        let itemExist = false;\r\n        // Lặp qua listCart\r\n        state.listCart.forEach((cart, index) => {\r\n          // Nếu item trong list cart có id bằng với id của payload (tức là item đã tồn tại rồi) thì sẽ gán biến itemExist là có item\r\n          // đồng thời sửa lại item trong listCart có index bằng index đang lặp các thông tin của payload mới add vào\r\n          if (\r\n            cart.product[\"_id\"][\"$oid\"] ===\r\n            payload.payload.product[\"_id\"][\"$oid\"]\r\n          ) {\r\n            itemExist = true;\r\n            state.listCart[index] = {\r\n              product: cart.product,\r\n              quantity:\r\n                Number(cart.quantity) + Number(payload.payload.quantity),\r\n              total: Number(cart.total) + Number(payload.payload.total),\r\n            };\r\n          }\r\n        });\r\n        // Nếu như chưa có item thì sẽ push item của payload vào listCart\r\n        if (!itemExist) {\r\n          state.listCart.push(payload.payload);\r\n        }\r\n      }\r\n      // Gắn listCart vào localStorage\r\n      localStorage.setItem(\"cartArr\", JSON.stringify(state.listCart));\r\n    },\r\n    updateCart(state, payload) {\r\n      state.listCart.forEach((cart, index) => {\r\n        if (\r\n          cart.product[\"_id\"][\"$oid\"] === payload.payload.product[\"_id\"][\"$oid\"]\r\n        ) {\r\n          if (cart.quantity === 0) {\r\n            state.listCart.splice(index, 1);\r\n          }\r\n          state.listCart[index] = {\r\n            product: cart.product,\r\n            quantity: payload.payload.quantity,\r\n            total: payload.payload.total,\r\n          };\r\n        }\r\n      });\r\n    },\r\n    deleteCart(state, payload) {\r\n      state.listCart.forEach((cart, index) => {\r\n        if (\r\n          cart.product[\"_id\"][\"$oid\"] === payload.payload.product[\"_id\"][\"$oid\"]\r\n        ) {\r\n          state.listCart.splice(index, 1);\r\n        }\r\n      });\r\n    },\r\n  },\r\n});\r\n\r\nexport default cartSlice.reducer;\r\n\r\nexport const cartActions = cartSlice.actions;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}