{"ast":null,"code":"import Card from\"../UI/Card\";import backgroundImage from\"../../images/banner1.jpg\";import styles from\"./SigninForm.module.css\";import{Form,Link,redirect,useActionData}from\"react-router-dom\";import{useEffect,useRef}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import{authenticateActions}from\"../../store/authenticateSlice\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const SigninForm=()=>{// Khi submit fail sẽ trả về các giá trị để người dùng biết mình nhập sai cái gì\n// và các giá trị đó là giá trị trả về của action nên dùng hook useActionData() để lấy nó\n// actionData sẽ là object với 2 property emailFail và passwordFail với 2 trường hợp\n// email hoặc password nhập ko đúng\n// (sẽ giải thích chi tiết hơn ở phần action bên dưới)\nconst actionData=useActionData();// Tạo dispatch để dispatch giá trị cho redux\nconst dispatch=useDispatch();// Lấy các state trong redux để cho việc validate\nconst emailIsValid=useSelector(state=>state.authenticate.emailIsValid);const passwordIsValid=useSelector(state=>state.authenticate.passwordIsValid);const emailIsTouched=useSelector(state=>state.authenticate.emailIsTouched);const emailIsExist=useSelector(state=>state.authenticate.emailIsExist);const passwordIsTouched=useSelector(state=>state.authenticate.passwordIsTouched);// Tạo ref để lấy giá trị input\nconst emailRef=useRef();const passwordRef=useRef();// Dùng useEffect để khi actionData thay đổi (khi submit fail) sẽ xóa dòng password nếu người dùng nhập sai password\nuseEffect(()=>{if(actionData&&actionData.passwordFail){document.querySelector(\".signin-password\").value=\"\";}},[actionData]);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"py-5 \".concat(styles[\"signin-container\"])// Tạo background image cho trang signin\n,style:{backgroundImage:\"url(\".concat(backgroundImage,\")\"),backgroundSize:\"cover\"},children:/*#__PURE__*/_jsx(\"div\",{className:\"container d-flex align-items-center justify-content-center\",children:/*#__PURE__*/_jsxs(Card,{className:\"py-5 w-50 text-center \".concat(styles[\"form\"]),children:[/*#__PURE__*/_jsx(\"h2\",{className:\"py-3 \".concat(styles[\"form-header\"]),children:\"Sign In\"}),/*#__PURE__*/_jsxs(Form,{method:\"post\",className:\"px-5\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"my-3\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"email\",className:\"form-control\",placeholder:\"Email\",name:\"email\",ref:emailRef// Khi focus vào input thì sẽ set isTouched của email input để xóa error message\n,onFocus:()=>{dispatch(authenticateActions.setEmailIsTouched());}// Khi không focus vào input thì sẽ validate email input\n,onBlur:()=>dispatch(authenticateActions.emailValidation(emailRef.current.value))}),!emailIsValid&&!emailIsTouched&&!emailIsExist&&/*#__PURE__*/_jsx(\"p\",{className:\"text-danger\",children:\"Email is invalid\"}),actionData&&actionData.emailFail&&/*#__PURE__*/_jsx(\"p\",{className:\"text-danger\",children:\"Email is not exist\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"my-3\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"password\",className:\"form-control signin-password\",placeholder:\"Password\",name:\"password\",ref:passwordRef// Khi focus vào input thì sẽ set isTouched của password input để xóa error message\n,onFocus:()=>dispatch(authenticateActions.setPasswordIsTouched())// Khi không focus vào input thì sẽ validate password input\n,onBlur:()=>dispatch(authenticateActions.passwordValidation(passwordRef.current.value))}),!passwordIsValid&&!passwordIsTouched&&/*#__PURE__*/_jsx(\"p\",{className:\"text-danger\",children:\"Password must be greater than 8 characters\"}),actionData&&actionData.passwordFail&&/*#__PURE__*/_jsx(\"p\",{className:\"text-danger\",children:\"Password is incorrect\"})]}),/*#__PURE__*/_jsx(\"div\",{className:styles[\"btn-signin\"],children:/*#__PURE__*/_jsx(\"button\",{className:\"btn py-2 d-block w-100 my-5\",children:\"Sign in\"})}),/*#__PURE__*/_jsxs(\"p\",{className:styles[\"navigate\"],children:[\"Create an account ? \",/*#__PURE__*/_jsx(Link,{to:\"/register\",children:\"Sign up\"})]})]})]})})})});};export default SigninForm;// Tạo action cho Route\nexport async function action(_ref){let{request,params}=_ref;// Lấy data khi submit form. Form của react-router-dom khi submit sẽ không gửi request đến server mà sẽ gửi đến action của Route\nconst req=await request.formData();const userLogin={email:req.get(\"email\"),password:req.get(\"password\")};// Lấy danh sách các users đã có từ localStorage\nconst users=JSON.parse(localStorage.getItem(\"userArr\"));// filter danh sách, nếu user đã tồn tại thì gán vào biến userExist , nếu ko thì userExist = undefined\nconst userExist=users.filter(user=>user.email===userLogin.email)[0];// Nếu có tồn tại user trong list\nif(userExist){// kiểm tra password của user nhập vào và user trong list\nif(userExist.password===userLogin.password){// Nếu khớp thì sẽ gán currentUser trong localStorage thành user đó\nlocalStorage.setItem(\"currentUser\",JSON.stringify(userExist));// xuất thông báo ra cho người dùng đã login thành công\nwindow.alert(\"Login success\");// Điều hướng đến trang home\nreturn redirect(\"/\");}else{// Nếu user tồn tại mà sai password trả về object có emailFail = false, passwordFail = true\nreturn{emailFail:false,passwordFail:true};}}else{// Nếu user không tồn tại trả về object có emailFail = true, passwordFail = true\nreturn{emailFail:true,passwordFail:true};}}","map":{"version":3,"names":["Card","backgroundImage","styles","Form","Link","redirect","useActionData","useEffect","useRef","useDispatch","useSelector","authenticateActions","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","SigninForm","actionData","dispatch","emailIsValid","state","authenticate","passwordIsValid","emailIsTouched","emailIsExist","passwordIsTouched","emailRef","passwordRef","passwordFail","document","querySelector","value","children","className","concat","style","backgroundSize","method","type","placeholder","name","ref","onFocus","setEmailIsTouched","onBlur","emailValidation","current","emailFail","setPasswordIsTouched","passwordValidation","to","action","_ref","request","params","req","formData","userLogin","email","get","password","users","JSON","parse","localStorage","getItem","userExist","filter","user","setItem","stringify","window","alert"],"sources":["D:/ReactJS/Assignment 03/rjs-asm03/src/components/authenticate/SigninForm.jsx"],"sourcesContent":["import Card from \"../UI/Card\";\r\nimport backgroundImage from \"../../images/banner1.jpg\";\r\nimport styles from \"./SigninForm.module.css\";\r\nimport { Form, Link, redirect, useActionData } from \"react-router-dom\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { authenticateActions } from \"../../store/authenticateSlice\";\r\n\r\nconst SigninForm = () => {\r\n  // Khi submit fail sẽ trả về các giá trị để người dùng biết mình nhập sai cái gì\r\n  // và các giá trị đó là giá trị trả về của action nên dùng hook useActionData() để lấy nó\r\n  // actionData sẽ là object với 2 property emailFail và passwordFail với 2 trường hợp\r\n  // email hoặc password nhập ko đúng\r\n  // (sẽ giải thích chi tiết hơn ở phần action bên dưới)\r\n  const actionData = useActionData();\r\n\r\n  // Tạo dispatch để dispatch giá trị cho redux\r\n  const dispatch = useDispatch();\r\n  // Lấy các state trong redux để cho việc validate\r\n  const emailIsValid = useSelector((state) => state.authenticate.emailIsValid);\r\n  const passwordIsValid = useSelector(\r\n    (state) => state.authenticate.passwordIsValid\r\n  );\r\n  const emailIsTouched = useSelector(\r\n    (state) => state.authenticate.emailIsTouched\r\n  );\r\n  const emailIsExist = useSelector((state) => state.authenticate.emailIsExist);\r\n  const passwordIsTouched = useSelector(\r\n    (state) => state.authenticate.passwordIsTouched\r\n  );\r\n  // Tạo ref để lấy giá trị input\r\n  const emailRef = useRef();\r\n  const passwordRef = useRef();\r\n\r\n  // Dùng useEffect để khi actionData thay đổi (khi submit fail) sẽ xóa dòng password nếu người dùng nhập sai password\r\n  useEffect(() => {\r\n    if (actionData && actionData.passwordFail) {\r\n      document.querySelector(\".signin-password\").value = \"\";\r\n    }\r\n  }, [actionData]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`py-5 ${styles[\"signin-container\"]}`}\r\n        // Tạo background image cho trang signin\r\n        style={{\r\n          backgroundImage: `url(${backgroundImage})`,\r\n          backgroundSize: \"cover\",\r\n        }}\r\n      >\r\n        <div\r\n          className={`container d-flex align-items-center justify-content-center`}\r\n        >\r\n          <Card className={`py-5 w-50 text-center ${styles[\"form\"]}`}>\r\n            <h2 className={`py-3 ${styles[\"form-header\"]}`}>Sign In</h2>\r\n\r\n            <Form method=\"post\" className=\"px-5\">\r\n              <div className=\"my-3\">\r\n                <input\r\n                  type=\"email\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Email\"\r\n                  name=\"email\"\r\n                  ref={emailRef}\r\n                  // Khi focus vào input thì sẽ set isTouched của email input để xóa error message\r\n                  onFocus={() => {\r\n                    dispatch(authenticateActions.setEmailIsTouched());\r\n                  }}\r\n                  // Khi không focus vào input thì sẽ validate email input\r\n                  onBlur={() =>\r\n                    dispatch(\r\n                      authenticateActions.emailValidation(\r\n                        emailRef.current.value\r\n                      )\r\n                    )\r\n                  }\r\n                />\r\n                {/* Xuất ra thông báo nếu email không hợp lệ */}\r\n                {!emailIsValid && !emailIsTouched && !emailIsExist && (\r\n                  <p className=\"text-danger\">Email is invalid</p>\r\n                )}\r\n                {/* Xuất ra thông báo nếu email đã tồn tại */}\r\n                {actionData && actionData.emailFail && (\r\n                  <p className=\"text-danger\">Email is not exist</p>\r\n                )}\r\n              </div>\r\n              <div className=\"my-3\">\r\n                <input\r\n                  type=\"password\"\r\n                  className=\"form-control signin-password\"\r\n                  placeholder=\"Password\"\r\n                  name=\"password\"\r\n                  ref={passwordRef}\r\n                  // Khi focus vào input thì sẽ set isTouched của password input để xóa error message\r\n                  onFocus={() =>\r\n                    dispatch(authenticateActions.setPasswordIsTouched())\r\n                  }\r\n                  // Khi không focus vào input thì sẽ validate password input\r\n                  onBlur={() =>\r\n                    dispatch(\r\n                      authenticateActions.passwordValidation(\r\n                        passwordRef.current.value\r\n                      )\r\n                    )\r\n                  }\r\n                />\r\n                {/* Xuất ra thông báo nếu người dùng nhập password dưới 8 kí tự */}\r\n                {!passwordIsValid && !passwordIsTouched && (\r\n                  <p className=\"text-danger\">\r\n                    Password must be greater than 8 characters\r\n                  </p>\r\n                )}\r\n                {/* Xuất ra thông náo nếu password không hợp lệ */}\r\n                {actionData && actionData.passwordFail && (\r\n                  <p className=\"text-danger\">Password is incorrect</p>\r\n                )}\r\n              </div>\r\n\r\n              <div className={styles[\"btn-signin\"]}>\r\n                <button className={`btn py-2 d-block w-100 my-5`}>\r\n                  Sign in\r\n                </button>\r\n              </div>\r\n\r\n              <p className={styles[\"navigate\"]}>\r\n                Create an account ? <Link to=\"/register\">Sign up</Link>\r\n              </p>\r\n            </Form>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SigninForm;\r\n\r\n// Tạo action cho Route\r\nexport async function action({ request, params }) {\r\n  // Lấy data khi submit form. Form của react-router-dom khi submit sẽ không gửi request đến server mà sẽ gửi đến action của Route\r\n  const req = await request.formData();\r\n  const userLogin = {\r\n    email: req.get(\"email\"),\r\n    password: req.get(\"password\"),\r\n  };\r\n\r\n  // Lấy danh sách các users đã có từ localStorage\r\n  const users = JSON.parse(localStorage.getItem(\"userArr\"));\r\n  // filter danh sách, nếu user đã tồn tại thì gán vào biến userExist , nếu ko thì userExist = undefined\r\n  const userExist = users.filter((user) => user.email === userLogin.email)[0];\r\n\r\n  // Nếu có tồn tại user trong list\r\n  if (userExist) {\r\n    // kiểm tra password của user nhập vào và user trong list\r\n    if (userExist.password === userLogin.password) {\r\n      // Nếu khớp thì sẽ gán currentUser trong localStorage thành user đó\r\n      localStorage.setItem(\"currentUser\", JSON.stringify(userExist));\r\n      // xuất thông báo ra cho người dùng đã login thành công\r\n      window.alert(\"Login success\");\r\n      // Điều hướng đến trang home\r\n      return redirect(\"/\");\r\n    } else {\r\n      // Nếu user tồn tại mà sai password trả về object có emailFail = false, passwordFail = true\r\n      return { emailFail: false, passwordFail: true };\r\n    }\r\n  } else {\r\n    // Nếu user không tồn tại trả về object có emailFail = true, passwordFail = true\r\n    return { emailFail: true, passwordFail: true };\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}