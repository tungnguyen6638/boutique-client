{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactJS\\\\Assignment 03\\\\rjs-asm03\\\\src\\\\components\\\\authenticate\\\\SigninForm.jsx\",\n  _s = $RefreshSig$();\nimport Card from \"../UI/Card\";\nimport backgroundImage from \"../../images/banner1.jpg\";\nimport styles from \"./SigninForm.module.css\";\nimport { Form, Link, redirect, useActionData } from \"react-router-dom\";\nimport { useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { authenticateActions } from \"../../store/authenticateSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SigninForm = () => {\n  _s();\n  // Khi submit fail sẽ trả về các giá trị để người dùng biết mình nhập sai cái gì\n  // và các giá trị đó là giá trị trả về của action nên dùng hook useActionData() để lấy nó\n  // actionData sẽ là object với 2 property emailFail và passwordFail với 2 trường hợp\n  // email hoặc password nhập ko đúng\n  // (sẽ giải thích chi tiết hơn ở phần action bên dưới)\n  const actionData = useActionData();\n\n  // Tạo dispatch để dispatch giá trị cho redux\n  const dispatch = useDispatch();\n  // Lấy các state trong redux để cho việc validate\n  const emailIsValid = useSelector(state => state.authenticate.emailIsValid);\n  const passwordIsValid = useSelector(state => state.authenticate.passwordIsValid);\n  const emailIsTouched = useSelector(state => state.authenticate.emailIsTouched);\n  const emailIsExist = useSelector(state => state.authenticate.emailIsExist);\n  const passwordIsTouched = useSelector(state => state.authenticate.passwordIsTouched);\n  // Tạo ref để lấy giá trị input\n  const emailRef = useRef();\n  const passwordRef = useRef();\n\n  // Dùng useEffect để khi actionData thay đổi (khi submit fail) sẽ xóa dòng password nếu người dùng nhập sai password\n  useEffect(() => {\n    if (actionData && (actionData.passwordFail || actionData.emailFail)) {\n      document.querySelector(\".signin-password\").value = \"\";\n    }\n  }, [actionData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `py-5 ${styles[\"signin-container\"]}`\n      // Tạo background image cho trang signin\n      ,\n      style: {\n        backgroundImage: `url(${backgroundImage})`,\n        backgroundSize: \"cover\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `container d-flex align-items-center justify-content-center`,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          className: `py-5 w-50 text-center ${styles[\"form\"]}`,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: `py-3 ${styles[\"form-header\"]}`,\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            method: \"post\",\n            className: \"px-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"my-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"email\",\n                className: \"form-control\",\n                placeholder: \"Email\",\n                name: \"email\",\n                ref: emailRef\n                // Khi focus vào input thì sẽ set isTouched của email input để xóa error message\n                ,\n                onFocus: () => {\n                  dispatch(authenticateActions.setEmailIsTouched());\n                }\n                // Khi không focus vào input thì sẽ validate email input\n                ,\n                onBlur: () => dispatch(authenticateActions.emailValidation(emailRef.current.value))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 17\n              }, this), !emailIsValid && !emailIsTouched && !emailIsExist && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-danger\",\n                children: \"Email is invalid\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 19\n              }, this), actionData && actionData.emailFail && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-danger\",\n                children: \"Email is not exist\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"my-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"password\",\n                className: \"form-control signin-password\",\n                placeholder: \"Password\",\n                name: \"password\",\n                ref: passwordRef\n                // Khi focus vào input thì sẽ set isTouched của password input để xóa error message\n                ,\n                onFocus: () => dispatch(authenticateActions.setPasswordIsTouched())\n                // Khi không focus vào input thì sẽ validate password input\n                ,\n                onBlur: () => dispatch(authenticateActions.passwordValidation(passwordRef.current.value))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 17\n              }, this), !passwordIsValid && !passwordIsTouched && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-danger\",\n                children: \"Password must be greater than 8 characters\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 19\n              }, this), actionData && actionData.passwordFail && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-danger\",\n                children: \"Password is incorrect\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles[\"btn-signin\"],\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `btn py-2 d-block w-100 my-5`,\n                children: \"Sign in\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: styles[\"navigate\"],\n              children: [\"Create an account ? \", /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/register\",\n                children: \"Sign up\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(SigninForm, \"N2caafHVs1+CDtlZakz6IatQDKA=\", false, function () {\n  return [useActionData, useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n_c = SigninForm;\nexport default SigninForm;\n\n// Tạo action cho Route\nexport async function action({\n  request,\n  params\n}) {\n  // Lấy data khi submit form. Form của react-router-dom khi submit sẽ không gửi request đến server mà sẽ gửi đến action của Route\n  const req = await request.formData();\n  const userLogin = {\n    email: req.get(\"email\"),\n    password: req.get(\"password\")\n  };\n\n  // Lấy danh sách các users đã có từ localStorage\n  const users = JSON.parse(localStorage.getItem(\"userArr\"));\n  // Nếu localStorage ko có thì sẽ xuất ra lỗi\n  if (!users) {\n    return {\n      emailFail: true\n    };\n  }\n\n  // filter danh sách, nếu user đã tồn tại thì gán vào biến userExist , nếu ko thì userExist = undefined\n  const userExist = users.filter(user => user.email === userLogin.email)[0];\n\n  // Nếu có tồn tại user trong list\n  if (userExist) {\n    // kiểm tra password của user nhập vào và user trong list\n    if (userExist.password === userLogin.password) {\n      // Nếu khớp thì sẽ gán currentUser trong localStorage thành user đó\n      localStorage.setItem(\"currentUser\", JSON.stringify(userExist));\n      // xuất thông báo ra cho người dùng đã login thành công\n      window.alert(\"Login success\");\n      // Điều hướng đến trang home\n      return redirect(\"/\");\n    } else {\n      // Nếu user tồn tại mà sai password trả về object có emailFail = false, passwordFail = true\n      return {\n        emailFail: false,\n        passwordFail: true\n      };\n    }\n  } else {\n    // Nếu user không tồn tại trả về object có emailFail = true, passwordFail = true\n    return {\n      emailFail: true,\n      passwordFail: true\n    };\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"SigninForm\");","map":{"version":3,"names":["Card","backgroundImage","styles","Form","Link","redirect","useActionData","useEffect","useRef","useDispatch","useSelector","authenticateActions","jsxDEV","_jsxDEV","Fragment","_Fragment","SigninForm","_s","actionData","dispatch","emailIsValid","state","authenticate","passwordIsValid","emailIsTouched","emailIsExist","passwordIsTouched","emailRef","passwordRef","passwordFail","emailFail","document","querySelector","value","children","className","style","backgroundSize","fileName","_jsxFileName","lineNumber","columnNumber","method","type","placeholder","name","ref","onFocus","setEmailIsTouched","onBlur","emailValidation","current","setPasswordIsTouched","passwordValidation","to","_c","action","request","params","req","formData","userLogin","email","get","password","users","JSON","parse","localStorage","getItem","userExist","filter","user","setItem","stringify","window","alert","$RefreshReg$"],"sources":["D:/ReactJS/Assignment 03/rjs-asm03/src/components/authenticate/SigninForm.jsx"],"sourcesContent":["import Card from \"../UI/Card\";\r\nimport backgroundImage from \"../../images/banner1.jpg\";\r\nimport styles from \"./SigninForm.module.css\";\r\nimport { Form, Link, redirect, useActionData } from \"react-router-dom\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { authenticateActions } from \"../../store/authenticateSlice\";\r\n\r\nconst SigninForm = () => {\r\n  // Khi submit fail sẽ trả về các giá trị để người dùng biết mình nhập sai cái gì\r\n  // và các giá trị đó là giá trị trả về của action nên dùng hook useActionData() để lấy nó\r\n  // actionData sẽ là object với 2 property emailFail và passwordFail với 2 trường hợp\r\n  // email hoặc password nhập ko đúng\r\n  // (sẽ giải thích chi tiết hơn ở phần action bên dưới)\r\n  const actionData = useActionData();\r\n\r\n  // Tạo dispatch để dispatch giá trị cho redux\r\n  const dispatch = useDispatch();\r\n  // Lấy các state trong redux để cho việc validate\r\n  const emailIsValid = useSelector((state) => state.authenticate.emailIsValid);\r\n  const passwordIsValid = useSelector(\r\n    (state) => state.authenticate.passwordIsValid\r\n  );\r\n  const emailIsTouched = useSelector(\r\n    (state) => state.authenticate.emailIsTouched\r\n  );\r\n  const emailIsExist = useSelector((state) => state.authenticate.emailIsExist);\r\n  const passwordIsTouched = useSelector(\r\n    (state) => state.authenticate.passwordIsTouched\r\n  );\r\n  // Tạo ref để lấy giá trị input\r\n  const emailRef = useRef();\r\n  const passwordRef = useRef();\r\n\r\n  // Dùng useEffect để khi actionData thay đổi (khi submit fail) sẽ xóa dòng password nếu người dùng nhập sai password\r\n  useEffect(() => {\r\n    if (actionData && (actionData.passwordFail || actionData.emailFail)) {\r\n      document.querySelector(\".signin-password\").value = \"\";\r\n    }\r\n  }, [actionData]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`py-5 ${styles[\"signin-container\"]}`}\r\n        // Tạo background image cho trang signin\r\n        style={{\r\n          backgroundImage: `url(${backgroundImage})`,\r\n          backgroundSize: \"cover\",\r\n        }}\r\n      >\r\n        <div\r\n          className={`container d-flex align-items-center justify-content-center`}\r\n        >\r\n          <Card className={`py-5 w-50 text-center ${styles[\"form\"]}`}>\r\n            <h2 className={`py-3 ${styles[\"form-header\"]}`}>Sign In</h2>\r\n\r\n            <Form method=\"post\" className=\"px-5\">\r\n              <div className=\"my-3\">\r\n                <input\r\n                  type=\"email\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Email\"\r\n                  name=\"email\"\r\n                  ref={emailRef}\r\n                  // Khi focus vào input thì sẽ set isTouched của email input để xóa error message\r\n                  onFocus={() => {\r\n                    dispatch(authenticateActions.setEmailIsTouched());\r\n                  }}\r\n                  // Khi không focus vào input thì sẽ validate email input\r\n                  onBlur={() =>\r\n                    dispatch(\r\n                      authenticateActions.emailValidation(\r\n                        emailRef.current.value\r\n                      )\r\n                    )\r\n                  }\r\n                />\r\n                {/* Xuất ra thông báo nếu email không hợp lệ */}\r\n                {!emailIsValid && !emailIsTouched && !emailIsExist && (\r\n                  <p className=\"text-danger\">Email is invalid</p>\r\n                )}\r\n                {/* Xuất ra thông báo nếu email đã tồn tại */}\r\n                {actionData && actionData.emailFail && (\r\n                  <p className=\"text-danger\">Email is not exist</p>\r\n                )}\r\n              </div>\r\n              <div className=\"my-3\">\r\n                <input\r\n                  type=\"password\"\r\n                  className=\"form-control signin-password\"\r\n                  placeholder=\"Password\"\r\n                  name=\"password\"\r\n                  ref={passwordRef}\r\n                  // Khi focus vào input thì sẽ set isTouched của password input để xóa error message\r\n                  onFocus={() =>\r\n                    dispatch(authenticateActions.setPasswordIsTouched())\r\n                  }\r\n                  // Khi không focus vào input thì sẽ validate password input\r\n                  onBlur={() =>\r\n                    dispatch(\r\n                      authenticateActions.passwordValidation(\r\n                        passwordRef.current.value\r\n                      )\r\n                    )\r\n                  }\r\n                />\r\n                {/* Xuất ra thông báo nếu người dùng nhập password dưới 8 kí tự */}\r\n                {!passwordIsValid && !passwordIsTouched && (\r\n                  <p className=\"text-danger\">\r\n                    Password must be greater than 8 characters\r\n                  </p>\r\n                )}\r\n                {/* Xuất ra thông náo nếu password không hợp lệ */}\r\n                {actionData && actionData.passwordFail && (\r\n                  <p className=\"text-danger\">Password is incorrect</p>\r\n                )}\r\n              </div>\r\n\r\n              <div className={styles[\"btn-signin\"]}>\r\n                <button className={`btn py-2 d-block w-100 my-5`}>\r\n                  Sign in\r\n                </button>\r\n              </div>\r\n\r\n              <p className={styles[\"navigate\"]}>\r\n                Create an account ? <Link to=\"/register\">Sign up</Link>\r\n              </p>\r\n            </Form>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SigninForm;\r\n\r\n// Tạo action cho Route\r\nexport async function action({ request, params }) {\r\n  // Lấy data khi submit form. Form của react-router-dom khi submit sẽ không gửi request đến server mà sẽ gửi đến action của Route\r\n  const req = await request.formData();\r\n  const userLogin = {\r\n    email: req.get(\"email\"),\r\n    password: req.get(\"password\"),\r\n  };\r\n\r\n  // Lấy danh sách các users đã có từ localStorage\r\n  const users = JSON.parse(localStorage.getItem(\"userArr\"));\r\n  // Nếu localStorage ko có thì sẽ xuất ra lỗi\r\n  if (!users) {\r\n    return { emailFail: true };\r\n  }\r\n\r\n  // filter danh sách, nếu user đã tồn tại thì gán vào biến userExist , nếu ko thì userExist = undefined\r\n  const userExist = users.filter((user) => user.email === userLogin.email)[0];\r\n\r\n  // Nếu có tồn tại user trong list\r\n  if (userExist) {\r\n    // kiểm tra password của user nhập vào và user trong list\r\n    if (userExist.password === userLogin.password) {\r\n      // Nếu khớp thì sẽ gán currentUser trong localStorage thành user đó\r\n      localStorage.setItem(\"currentUser\", JSON.stringify(userExist));\r\n      // xuất thông báo ra cho người dùng đã login thành công\r\n      window.alert(\"Login success\");\r\n      // Điều hướng đến trang home\r\n      return redirect(\"/\");\r\n    } else {\r\n      // Nếu user tồn tại mà sai password trả về object có emailFail = false, passwordFail = true\r\n      return { emailFail: false, passwordFail: true };\r\n    }\r\n  } else {\r\n    // Nếu user không tồn tại trả về object có emailFail = true, passwordFail = true\r\n    return { emailFail: true, passwordFail: true };\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}